<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Ryland Herrick]]></title>
  <link href="http://rylnd.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://rylnd.github.com/"/>
  <updated>2013-06-16T12:18:38-05:00</updated>
  <id>http://rylnd.github.com/</id>
  <author>
    <name><![CDATA[Ryland Herrick]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Github Pages]]></title>
    <link href="http://rylnd.github.com/blog/2012/04/08/github-pages/"/>
    <updated>2012-04-08T19:59:00-05:00</updated>
    <id>http://rylnd.github.com/blog/2012/04/08/github-pages</id>
    <content type="html"><![CDATA[<p>I haven&rsquo;t posted anything in a while. I won&rsquo;t make excuses, that&rsquo;s just the way it is.</p>

<p>If you hadn&rsquo;t noticed, the blog is no longer WordPress, nor is it hosted on my Linode. A few weeks ago, during <a href="http://bendyworks.com">bendyworks</a>&lsquo; amazing growth days (which will be described in a future post), I converted my blog entries to <a href="https://github.com/mojombo/jekyll">jekyll</a>-formatted YAML and markdown. This was actually the hardest part of the process. I won&rsquo;t go into details, but it involved piping my WordPress-exported posts through a Rube-Goldbergesque series of Python libraries.</p>

<p>With my old posts converted, I then got an <a href="http://octopress.org">octopress</a> repository set up on GitHub, using their super-cool <a href="http://pages.github.com">Pages</a> functionality for hosting and super-easy deployment. The whole process is very slick, and requires much, much less effort, maintenance, money, and disk space than my former methods.</p>

<p>I&rsquo;ll be tweaking the look and content in the weeks to come; I just wanted to give an update (mostly so that my newest post wasn&rsquo;t a year old).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Life: Upgraded.]]></title>
    <link href="http://rylnd.github.com/blog/2011/08/05/life-upgraded/"/>
    <updated>2011-08-05T19:18:59-05:00</updated>
    <id>http://rylnd.github.com/blog/2011/08/05/life-upgraded</id>
    <content type="html"><![CDATA[<p>Hoo boy.  A lot has changed in the past few weeks.  After spending about a month looking for jobs and apartments in Milwaukee, we finally found both.  We found the perfect apartment, and I accepted a job offer for an awesome Django startup in Spreenkler&rsquo;s Accelerator program.  The day after I said yes to the job, I was approached with an offer here in Madison.  While both were amazing jobs, I ended up taking the job here in Madison as I felt it had more to offer, experientially.  Starting at the end of August, I&rsquo;ll be an official <a href="http://bendyworks.com/">Bendyworker</a>.</p>

<p>Of course, this means that the time Amanda and I spent planning for Milwaukee was basically for naught.  I&rsquo;ve got an amazing job, but we&rsquo;re back to square one apartment-wise.  I&rsquo;ve moved every year since 2005; I&rsquo;m ready to buy a house out of sheer laziness.</p>

<p>Speaking of laziness, I&rsquo;ve been working day and night on our startup, <a href="http://jungolhq.com">Jungol</a>.  We just launched our alpha tonight, after much internal tinkering.  I&rsquo;ve read time and again that the best thing you can do is just put your project out there, so it&rsquo;s something of a relief to finally have done so.  Check it out at <a href="http://jng.li/qJ338J">http://jng.li/qJ338J</a>.</p>

<p>There&rsquo;s a lot of smaller things that still need to be done, but most everything&rsquo;s there right now.  We&rsquo;ve got our proof of concept; the rest is up to the public (who told us they wanted this, we swear).  It&rsquo;s an exciting time and I&rsquo;m proud to be a part of the whole thing.  Having written the entire site save for design, it&rsquo;s becoming like a child to me, but I&rsquo;m trying my best not to become too emotionally attached.</p>

<p>Our final frisbee game is next Tuesday.   Our <em>championship</em> frisbee game, that is.  This last week was playoffs, and we won both games.  I&rsquo;m pretty proud of the team; we had a lot of beginners, some who&rsquo;d never even played a team sport before, but we&rsquo;ve come together and are playing amazingly well.  Playing with the same team every year is comforting, I&rsquo;m sure, but there&rsquo;s something to be said for this amazing transition from &lsquo;group of people&rsquo; to &lsquo;team&rsquo; over the course of a season.  Remind me to let you know if we won or not.</p>

<p>So I&rsquo;ve got a great job and a great girlfriend.  Let me know if you see any great apartments for rent around town.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Busyness, Business]]></title>
    <link href="http://rylnd.github.com/blog/2011/06/12/busyness-business/"/>
    <updated>2011-06-12T14:57:23-05:00</updated>
    <id>http://rylnd.github.com/blog/2011/06/12/busyness-business</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since I wrote anything, but I&rsquo;ve been really, really busy.  Most importantly:  I <strong>quit my job to work for a startup</strong>.</p>

<p>I was approached by Steve at Spreenkler about two weeks ago.  He asked if I&rsquo;d be interested in working as a developer for one of the teams in their summer <a href="http://spreenklertalentlabs.org/startup/?page_id=4">Incubator Program</a>.  My old job was incredibly understanding about the opportunity, and after a few meetings and a trip to Milwaukee I was part of Jungol, Inc.  Expect a more detailed post about the team and what I&rsquo;m doing (hint: I&rsquo;m <em>the</em> developer) in the near future, when I have some more time.</p>

<p>Started doing some <a href="http://4clojure.com">4Clojure</a> problems.  I thought &ldquo;Hey, I&rsquo;m getting it!&rdquo; until I enabled Golf Mode and saw how my problems (at least length-wise) compared to others' on the site.  Rest assured that I&rsquo;m working on it; I&rsquo;ve got the first 25 problems done so far.</p>

<p>I added a header to the site.  Not sure if I really like it, but it adds color and I didn&rsquo;t cringe upon seeing it the next day (stepping away from it for a while is always a good choice), so it&rsquo;s here to stay.  I&rsquo;ll be making small changes here and there, dependent on time and interest.</p>

<p>Frisbee is going good; we&rsquo;re 2-1 and we finally got our sweet jerseys.
It&rsquo;s been quite an ordeal trying to find an organize a team (yes, even for a &lsquo;sport&rsquo; like Ultimate Frisbee), but I&rsquo;m pretty damn happy with the results.  I&rsquo;ve been trying to organize everything on Google (Mail, Documents, Calendar) and while I created the tools for my team to use, I certainly can&rsquo;t force their utilization.  Oh, well.  At least people are showing up to games (and winning them).</p>

<p>Amanda and I went to the <a href="http://www.clipsoffaith.com/">Clips of Faith</a> Tour at Olin Park on Friday, and that was a blast.  Highlights:</p>

<ul>
<li>Really good beer, relatively cheap</li>
<li>Free handlebars upon entry</li>
<li>Entry to win the New Belgium cruiser</li>
<li>Delicious vegan nachos</li>
<li>Really cool short films</li>
</ul>


<p>Lastly, I&rsquo;ve finally taken the leap and bought a MacBook Pro.  While I&rsquo;ve supported OS X in previous jobs I&rsquo;ve never actually owned or used it.  I&rsquo;m mostly using the terminal for development anyways, so work-wise it&rsquo;s not that big of a jump from linux.</p>

<p>However, I&rsquo;m also <strong>moving from Emacs to vim</strong>, which is a more considerable jump.  I&rsquo;d used vim previously in college, but have done most of my serious programming with Emacs in the last year or two.  That&rsquo;s going much better than I would have expected, though.  I don&rsquo;t think I&rsquo;m ready for any significant plugins right now but I&rsquo;m going to be using vim from now on and see how it goes.</p>

<p>The reason for vim?  Why, my third and final paradigm shift:  I&rsquo;m using Ruby on Rails as the framework for this startup project.  I spent last week learning as much as I could while getting my new workstation set up, and spent Saturday at Bendyworks for the Ruby Hack Day Meetup.  Everyone was super nice and helpful as usual; the only thing keeping me from learning more was my reluctance to speak up and ask for help.  I got a basic rails project up, and will be getting some actual guts in there this week.  The only thing I&rsquo;m missing is a testing framework (I&rsquo;m going to be using rspec, if any, but it&rsquo;s not in there yet).  I&rsquo;m currently debating whether unit testing would be reasonable at this point, given the already steep learning curve I&rsquo;m facing.  I&rsquo;m probably going to hold off for the first few basic features, and maybe reassess the situation in a few weeks.</p>

<p>The Ruby/Rails hurdle is going to be a huge one, as I&rsquo;m quickly learning, but I&rsquo;m really excited to have this opportunity.  As a consequence I&rsquo;ve been doing more hacking than sleeping, and it&rsquo;s really starting to catch up with me.  It&rsquo;s an absolute blast, and in my mind it&rsquo;s not work at all, but my body is beginning to disagree with me.</p>

<p>On that note, I think it&rsquo;s time I rest my weary head a bit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Post]]></title>
    <link href="http://rylnd.github.com/blog/2011/05/25/quick-post/"/>
    <updated>2011-05-25T17:23:36-05:00</updated>
    <id>http://rylnd.github.com/blog/2011/05/25/quick-post</id>
    <content type="html"><![CDATA[<p>First: I started this post on Monday, but never got around to finishing it.</p>

<p>Went to the Mad Railers meetup Monday, despite my body requesting otherwise.  I figure if I don&rsquo;t have the time to sit down and learn Ruby right myself right now, I should at least take advantage of these local groups.</p>

<p>The topic was testing, and while that might not be where most people would start when learning a new language (myself included), I have no doubts that it will help me in the long run.  There were a few great talks and I learned quite a bit.  I&rsquo;m slowly putting the framework together in my mind, piece by piece.</p>

<p>My general approach to learning practical programming has been &lsquo;abstraction is a treat that must be deserved.&rsquo;  While higher-level languages are amazing and I absolutely cannot wait to use them professionally, at the same time I feel like I need to program a little &lsquo;lower&rsquo; for a while to appreciate and understand things to a reasonable degree.  Subsequently a good deal of what I do has holes and certainly isn&rsquo;t as comprehensive as if I&rsquo;d put the same amount of work on top of a template.  But finding and plugging those holes is a great learning experience.</p>

<p>Running my own VPS and web server has probably been the best project, education-wise.  There are certainly plenty of holes and configurations that go into system administration stuff, along with being great practice with bash.  I didn&rsquo;t really get that when I was a student, but I&rsquo;m sure glad I&rsquo;m doing it now.</p>

<p>Knowledge is power.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lots of Snow]]></title>
    <link href="http://rylnd.github.com/blog/2011/01/31/lots-of-snow/"/>
    <updated>2011-01-31T19:11:48-06:00</updated>
    <id>http://rylnd.github.com/blog/2011/01/31/lots-of-snow</id>
    <content type="html"><![CDATA[<p>Woke up to the promise of a blizzard.</p>

<p>I was supposed to head down to Kenosha for a dentist&rsquo;s appointment this morning, but that was canceled due to weather; it wasn&rsquo;t a crucial appointment, and I really didn&rsquo;t want to be stuck there until Wednesday/Thursday.</p>

<p>Today also marked the first Mad Railers meeting I was (supposed to be) attending, but weather and lack of suitable transportation left me home coding instead.  I tried to make myself feel better with some Ruby/Rails research/education and rationalizing that my lack of knowledge in that framework would prevent me from learning/contributing much at such a meeting, but I&rsquo;m still bummed that I missed it and have yet to attend.  Next month&rsquo;s meeting is marked in red on the calendar.</p>

<p>PE update:  Did problems <a href="http://projecteuler.net/index.php?section=problems&amp;id=24">24</a>, <a href="http://projecteuler.net/index.php?section=problems&amp;id=36">36</a>, and <a href="http://projecteuler.net/index.php?section=problems&amp;id=34">34</a> today, in that order.  24 was the most interesting; I had started on a solution to it a few days ago.  I knew from my Combinatorics class how to represent permutations as a list of inversions:</p>

<blockquote><p>Given a set of n digits, each permutation of that set can be written as a list of n-1 numbers, say i(0)-i(n-1), where i(n) represents the number of inversions with respect to n. You only need n-1 numbers in the list/vector, as the last is implied(same idea as degrees of freedom in stats).</p></blockquote>

<p>If the original set is in lexicographic order, i.e. 12345, the easiest way to explain, say,  i(3) is as the count of numbers out of order with respect to 3.  If the permutation is 23145, the inversion vector(list) would be [1100].</p>

<p>This means that 2 has one number out of order (1), as does 3 (also 1).  Remember though, that inversions in general are just a pair(x,y), and a permutation can be defined as the list of pairwise-flips (inversions) it takes to get from the original number/set/whatever.</p>

<p>So, knowing that, I basically jumped into writing a solution as follows:</p>

<ul>
<li>The starting, 0th permutation is 0123456789</li>
<li>I would manually write out the next x permutations, in lexicographic order, along with the corresponding inversion vectors, in the hopes of seeing a pattern regarding the list of inversion vectors.

<ul>
<li>I did this under the idea that calculating 1,000,000 10-digit numbers in a certain way would be much faster than actually doing the permuting manually, one million times.</li>
</ul>
</li>
</ul>


<p>I did this for what ended up being the first 24 permutations, which corresponded to permutations of only the last 4 digits, and ended up with something like Table A:</p>

<div style='float:left;margin-right:0.5em;'>
<h5 style='margin:0.5em 0;'>Table A</h5>
<table>
<tr><th> number </th><th> permutation </th></tr>
<tr><td> 6987 </td><td> 012 </td></tr>
<tr><td> 7689 </td><td> 100 </td></tr>
<tr><td> 7698 </td><td> 101 </td></tr>
<tr><td> 7869 </td><td> 110 </td></tr>
<tr><td> 7896 </td><td> 111 </td></tr>
<tr><td> 7968 </td><td> 102 </td></tr>
<tr><td> 7986 </td><td> 112 </td></tr>
<tr><td> 8679 </td><td> 020 </td></tr>
<tr><td> 8697 </td><td> 021 </td></tr>
<tr><td> 8769 </td><td> 120 </td></tr>
<tr><td> 8796 </td><td> 121 </td></tr>
<tr><td> 8967 </td><td> 022 </td></tr>
<tr><td> 8976 </td><td> 122 </td></tr>
<tr><td> 9678 </td><td> 003 </td></tr>
<tr><td> 9687 </td><td> 013 </td></tr>
<tr><td> 9768 </td><td> 103 </td></tr>
<tr><td> 9786 </td><td> 113 </td></tr>
<tr><td> 9867 </td><td> 023 </td></tr>
<tr><td> 9876 </td><td> 123 </td></tr>
</table>
</div>




<div style='float:left;'>
<h5 style='margin:0.5em 0;'>Table B</h5>
<table>
<tr><th> decimal   </th><th> factorial   </th></tr>
<tr><td> 0         </td><td> 0!          </td></tr>
<tr><td> 1         </td><td> 10!         </td></tr>
<tr><td> 2         </td><td> 100!        </td></tr>
<tr><td> 3         </td><td> 110!        </td></tr>
<tr><td> 4         </td><td> 200!        </td></tr>
<tr><td> 5         </td><td> 210!        </td></tr>
<tr><td> 6         </td><td> 1000!       </td></tr>
<tr><td> 7         </td><td> 1010!       </td></tr>
<tr><td> 8         </td><td> 1100!       </td></tr>
<tr><td> 9         </td><td> 1110!       </td></tr>
<tr><td> 10        </td><td> 1200!       </td></tr>
<tr><td> 11        </td><td> 1210!       </td></tr>
<tr><td> 12        </td><td> 2000!       </td></tr>
<tr><td> 13        </td><td> 2010!       </td></tr>
<tr><td> 14        </td><td> 2100!       </td></tr>
<tr><td> 15        </td><td> 2110!       </td></tr>
<tr><td> 16        </td><td> 2200!       </td></tr>
<tr><td> 17        </td><td> 2210!       </td></tr>
<tr><td> 18        </td><td> 3000!       </td></tr>
<tr><td> 19        </td><td> 3010!       </td></tr>
<tr><td> 20        </td><td> 3100!       </td></tr>
<tr><td> 21        </td><td> 3110!       </td></tr>
<tr><td> 22        </td><td> 3200!       </td></tr>
<tr><td> 23        </td><td> 3210!       </td></tr>
</table>
</div>


<div style='clear:both;'></div>


<p>Not seeing a pattern?  Neither did I.  It starts out looking like it&rsquo;s just counting up in binary, but then a 2 pops up, and there aren&rsquo;t any nice rules like, say, &lsquo;they increase in value from L to R&rsquo; because of cases like 8679.</p>

<p>I tried in vain to see/reverse-engineer a pattern from this list of vectors, and eventually gave up for the night.   I knew that I was on the right track, that somehow the order in which these items were inverted to preserve lexicographic order wasn&rsquo;t just random.  As with some of my past PE solutions, the key came from a little bit of research: I was browsing Wikipedia&rsquo;s entry on permutations, when I came to <a href="http://en.wikipedia.org/wiki/Permutation#Numbering_permutations">this</a>.</p>

<p>Well, that definitely looked promising.  After a bit more reading and clicking links, I came upon Table B (found <a href="http://en.wikipedia.org/wiki/Factorial_number_system#Examples">here</a>):</p>

<p>Ok, so they&rsquo;re not exactly the same.  I think the irregularities come from my non-standard, on-the-fly way of representing permutations, but you can imagine my excitement when I found that table.  It meant my hunch was right, and the main point was this:  <strong>Listing permutations in lexicographic order yields a pattern of inversion vectors, and this pattern corresponds directly to the factoradic representation of that permutation&rsquo;s order in that list.  </strong>Or, to quote Wikipedia a few lines down:</p>

<p><em>There is a natural mapping between the integers 0, &hellip;, n! − 1 (or equivalently the numbers with n digits in factorial representation) and permutations of n elements in lexicographical order, when the integers are expressed in factoradic form. This mapping has been termed the Lehmer code (or inversion table).</em></p>

<p>Well, there you have it.  The trick comes from writing a decimal in factoradic form, i.e.</p>

<pre><code>15 = 2110! = 2*3! + 1*2! + 1*1! + 0*0!
</code></pre>

<p>and 2110 as an inversion vector corresponds to the permutation 2130, which is:</p>

<blockquote><p>The 15th permutation of 0123. Yay!</p></blockquote>

<p>So I had my answer.  To find the millionth lexicographic permutation of 0123456789, all I had to do was find the factoradic representation of 999999 (off by one), which would map to an inversion vector, from which I could find the permutation.  And find it I did.</p>

<p>After that, 36 and 34 were easy.  For 36 I just wrote a function <code>is_pal()</code> that takes a string and returns whether or not it&rsquo;s palindromic (and now I know how to get the binary representation of an int!).  34 was even easier: I reused the factorial function I had just written for 24 (I know there are built-in ones now; I wanted to write my own).</p>

<p>Hopefully tomorrow won&rsquo;t get snowed out.</p>
]]></content>
  </entry>
  
</feed>
