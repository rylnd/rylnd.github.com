<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: euler | RyLand]]></title>
  <link href="http://ryalnd.github.com/blog/categories/euler/atom.xml" rel="self"/>
  <link href="http://ryalnd.github.com/"/>
  <updated>2012-05-13T20:10:30-05:00</updated>
  <id>http://ryalnd.github.com/</id>
  <author>
    <name><![CDATA[Ryland Herrick]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Project Euler: Level 2]]></title>
    <link href="http://ryalnd.github.com/blog/2011/02/25/project-euler-level-2/"/>
    <updated>2011-02-25T20:51:27-06:00</updated>
    <id>http://ryalnd.github.com/blog/2011/02/25/project-euler-level-2</id>
    <content type="html"><![CDATA[<p>Spent the day attempting contact with people who didn't want to communicate with me.  Filed my state taxes (had done federal a week or so ago).</p>

<p>I couldn't decide whether to feel good about today's productivity or not, so to add some weight to the 'productive' side, I went ahead and finished the remaining 7 PE problems needed to get me to the coveted <strong>Level 2</strong>.</p>

<p>In case you were wondering, and for posterity,  those problems were: <a href="http://projecteuler.net/index.php?section=problems&amp;id=33">33</a>, <a href="http://projecteuler.net/index.php?section=problems&amp;id=53">53</a>, <a href="http://projecteuler.net/index.php?section=problems&amp;id=41">41</a>, <a href="http://projecteuler.net/index.php?section=problems&amp;id=56">56</a>, <a href="http://projecteuler.net/index.php?section=problems&amp;id=97">97</a>, <a href="http://projecteuler.net/index.php?section=problems&amp;id=55">55</a>, and <a href="http://projecteuler.net/index.php?section=problems&amp;id=79">79</a>.  Problem 79 was by far the most interesting; I even ended up doing some OOP with Python for the first time.</p>

<p><strong>Quick summary:</strong></p>

<p>33: Was only getting three of the four fractions initially due my incorrectly assuming that the pre-canceled denominator was going to be a whole multiple of the numerator: 26/65 did not fit that mold.</p>

<p>53: The only issue here was parsing the actual problem syntax.  Thanks again, Professor Ono (my combinatorics prof.)</p>

<p>41: Although I haven't mentioned it before, I wrote a Sieve of Eratosthenes-like function for (really) quickly computing primes up to a certain number when I first started PE.  I once again used that here, and filtered that list down to pandigitals.  I won't say the answer, but I do want to mention the fact that it was 7-digits, due to the fact that the sums from 1 to 8 and 9 are 36 and 45, respectively, and so are always divisible by 3 (thanks to that nice rule for divisibility by 3).</p>

<p>56: Pretty much exactly how you'd first think to do it.</p>

<p>97:  Ended up using Python's built-in pow() function, taking full advantage of its optional modulo argument to limit the result (and calculations) to only those last ten digits.  Other than that, completely straightforward.</p>

<p>55: Easier to just show this one.  Used a recursive function and the limits the explicitly stated.</p>

<p><div><script src='https://gist.github.com/2019414.js?file=euler_55.py'></script>
<noscript><pre><code>def lychrel(n, it):
    if it&lt;50:
        rev = n[::-1]
        _sum = str(int(n) + int(rev))
        if _sum==_sum[::-1]:
            return int(_sum)
        else: return lychrel(_sum, it+1)
    else: return 0

l = [x for x in range(1,10000) if not lychrel(str(x),0)]
print len(l)</code></pre></noscript></div>
</p>

<p>Problem 79 was the most interesting.  I just finished.  I made two related assumptions, without which my answer probably wouldn't work. I also cheated a bit and ended up explicitly telling the program which numbers were used in the password, although I could've easily made that list from the input as well.</p>

<p>I ended up using a Python class in the same way you'd use a C struct, in this case to associate two sets to each digit used in the password: one representing all the numbers that appeared to the left of that digit in those logins, and the other representing those that appeared to the right of it.  Here's where those assumptions I mentioned earlier came in:  I assumed that each digit was only present in the password once, and that there were no conflicting orderings (e.g. 6 appearing both to the left and right of a digit x in different login attempts, which would imply that x appears more than once in the password).</p>

<p>I ran my program and took a look at the lists, and saw that in this case my assumptions were correct.  Then I simply ordered those digits based on the lengths of their 'left' sets (So the digit with nothing to the left of it would be first, and the digit with everything else to the left of it would be last.  Get it?).  Voila.  Code:</p>

<p><div><script src='https://gist.github.com/2019414.js?file=euler_79.py'></script>
<noscript><pre><code>class digit:
    def __init__(self,x):
        self.dig = x
        self.left = set()
        self.right = set()

#split the input into a list of 3-digit login attempts
logins = list(set([l.strip('\n\r') for l in open('keylog.txt')]))

#compile key's left and right sets
def place(key):
    num = str(key.dig)
    check = [line for line in logins if num in line]
    for line in check: #for each line that contains this digit
        place = line.index(num)
        for i in line:
            if line.index(i) &lt; place:
                key.left.add(i)
            elif line.index(i) &gt;place:
                key.right.add(i)

#create an instance for each digit present
obs = [digit(l) for l in ['0','1','2','3','6','7','8','9']]
#create those instances' associated sets
[place(dig) for dig in obs]

#place in logical order
obs.sort(key=lambda x: x.left)


'''
SORT V0
for i in range(9):
    for dig in obs:
        if len(dig.left)==i:
            print dig.dig
SORT V1
print [dig.dig for i in range(9) for dig in obs if len(dig.left)==i]
'''
print ''.join([d.dig for d in obs])
print reduce(lambda x,y: x+y,[d.dig for d in obs])</code></pre></noscript></div>
</p>

<p>Commented out near the bottom you'll see two previous methods I had used to do the final sorting mentioned above.  V0 had nested loops, which wasn't awful but not good; V1 was essentially just a list comprehension of same.  I tried to be a bit more 'pythonic' with my final method, using lambda function within the list.sort() method to order the list of 'digit' instances on their left set.</p>

<p>The last two lines produce the same string, but I wanted to show both approaches. The first is the preferred, pythonic, and much faster way.  The second is essentially the same as calling <code>print reduce(operator.add, [d.dig for d in obs])</code>.</p>

<p>which is exactly what Python's built-in <code>sum()</code> function does.   However Python will (purposely) throw an exception if you try to use <code>sum()</code> on a list of strings, apparently because they don't want you doing that (although, as I showed, lambdas are a way around that).</p>

<p>A more thorough explanation of the above can be found on Stack Overflow (<a href="http://stackoverflow.com/questions/3525359/python-sum-why-not-strings">link</a>).</p>

<p>It's official. I really like Python.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Feb 24, 2011]]></title>
    <link href="http://ryalnd.github.com/blog/2011/02/24/feb-24-2011/"/>
    <updated>2011-02-24T16:59:00-06:00</updated>
    <id>http://ryalnd.github.com/blog/2011/02/24/feb-24-2011</id>
    <content type="html"><![CDATA[<p>Haven't written in a while.  Things have been busy.  Not always productive, but always busy.  I just finished a few PE problems, and I'll talk about those in a bit, but first here's everything else:</p>

<p>Officially started work on a new web development project, using mostly MySQL, JavaScript and PHP.  This will definitely be the most complicated of the ones I've done so far, so I'm looking forward to learning how to use these technologies to do things I've done in the past with .NET.  I'll keep you posted on that.</p>

<p>The site's in an awkward in-between phase right now;  I stripped down a lot of stuff in my towards-2.0 efforts, but haven't added much new stuff besides some sweet fonts (props to @font-face).</p>

<p>I've been struggling lately with my genetic predisposition toward a veritable smorgasbord of allergies and their physical manifestations (thanks mom and dad!), trying to keep things under control with medication and allergen-avoidance, the latter of which unfortunately includes my girlfriend's house.  So that's no fun.  Things are getting much better though and I for one cannot wait for this cold, dry weather to end.</p>

<p>For the aforementioned and other reasons, I haven't been doing a lot of going out.  Went to the Comedy Club last week for the 2nd round of the competition, but this week opted instead to see Say Hi at the High Noon Saloon, which was a good time.  Other than that it's been interviews, doctor's appointments, endless email correspondence, coding and reading.</p>

<p>I started Infinite Jest a few weeks ago and I'm a little more than 1/3 done right now.  Despite the fact that a friend owns a copy and lent it out to me, I (after much internal debate) opted to buy the electronic version for my Kindle, which I don't regret.  Besides being able to jump to one of the hundreds of endnotes by simply clicking on the text-embedded link (as opposed to flipping rather awkwardly back and forth through a ragged, floppy paperback version), I'm also able to see the definition of a word (e.g. 'atavistic') simply by hovering over it.  I'm really enjoying both the book itself and its positive impact on my vocabulary.</p>

<p>Regarding the job front, all's (mostly) quiet.  It's still an awkward situation, between looking for temporary/contract/short-term work in Madison v. a development 'career' in Milwaukee.  Even the contract jobs I'm finding here are confusingly looking for someone with the desire to work (the contract position) full-time.  While I haven't been dishonest at interviews to any degree regarding my long-term goals and career plans, I know that doing so would probably get me the position (a few places have even stated this implicitly).  In a manner consistent with my vocational luck as of late, I've now been presented with one verifiable and one probable job offer, for long-term development positions here in Madison.  Again, though, I don't want to lie my way into a job when I know very well I'll be gone in August, so for the time being unemployed I remain.</p>

<p>Project Euler.  I've now got 43 problems done.  7 more and I'll be level 2 and finished with the first page.  Regarding the last post I managed to speed up problem 27 and knocked that one down.  Tonight I completed <a href="http://projecteuler.net/index.php?section=problems&amp;id=31">31</a>, <a href="http://projecteuler.net/index.php?section=problems&amp;id=37">37</a> and <a href="http://projecteuler.net/index.php?section=problems&amp;id=39">39</a>, but I'm mostly gonna be explaining and (<em>gasp</em>) presenting my solution to problem 39.</p>

<p>I had actually started on problem 37 a week or so ago, but my solution wasn't finding all 11 requested primes in the range of like [1, 100,000,000].  I was on the right track with realizations like 'these primes can't contain the digits 4,6, or 8 anywhere,' I went wrong in also including 2 and 5 in that list, since those numbers could in fact be the leftmost digit of said primes.  P37 done.</p>

<p>Problem 31 was mostly a no-brainer; I've seen similar problems in Combinatorics and wrote a recursive algorithm to solve it.  It essentially involved moving from the highest-denomination coins to the lowest, with the recursive function calculating in how many ways the given amount could be made with a decreasing number of denominations.  P31 done.</p>

<p><a href="http://projecteuler.net/index.php?section=problems&amp;id=39">Problem 39</a> asks you to find the perimeter <em>p</em> of a right triangle that has the greatest number of possible pythagorean triples (a,b,c) that can satisfy that perimeter.  After some half-written solutions and great deliberation, the solution came out of knowing that term, 'pythagorean triple,' and consequently <a href="http://en.wikipedia.org/wiki/Pythagorean_triple">this Wikipedia page</a>.</p>

<p>Reading through this, particularly the parts about <strong>P</strong>rimitive <strong>P</strong>ythagorean <strong>T</strong>riples and Euclid's formula, I was able to engineer a solution through the following logic:</p>

<ol>
<li><p>All possible Pythagorean triples (what we're trying to tally for our solution) are either a PPT or a multiple of same.</p></li>
<li><p>PPTs can be calculated with Euclid's formula: <code>a = m^2 - n^2, b = 2mn, c = m^2 + n^2</code> given that <code>m &gt; n</code>, <code>m</code> and <code>n</code> are coprime (i.e. <code>gcd(m,n)==1</code>), and one of them is even.</p></li>
<li><p>Combining the formula above with the Pythagorean Theorem and the obvious fact that <code>a + b + c = p</code>, we get: <code>2m^2 + 2mn = p</code></p></li>
<li><p>For a triple to be a solution for a perimeter <em>p</em>, <em>p</em> must be a multiple of a given PPT's perimeter.  Put another way, for (a,b,c) of a satisfying PPT, <code>p % (a + b + c) == 0</code></p></li>
</ol>


<p>After that it was just a matter of putting it all together:</p>

<p><div><script src='https://gist.github.com/2019433.js?file='></script>
<noscript><pre><code>from fractions import gcd

#Euclid's Formula
def getabc(m,n):
    a = m**2 - n**2
    b = 2*m*n
    c = m**2 + n**2
    return a,b,c

#calculate all PPTs for which p &lt; 1000
prim_trips = [getabc(m,n) for m in range(1,100) for n in range(1,100) if m &gt; n and gcd(m,n) == 1 and 2*m*m + 2*m*n &lt;= 1000 and (m%2 == 0 or n % 2 == 0)]

#find all possible triples for a given p
def total(p):
    return sum([1 for (a,b,c) in prim_trips if p % (a + b + c) == 0])

#collect all possible solutions for each perimeter p
totals = [(p,total(p)) for p in range(1,1001)]

#get max
print max(totals, key = lambda x: x[1] )
</code></pre></noscript></div>
</p>

<p>Check back soon for more discussion of math, code, and existential crises.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Math in the Cold]]></title>
    <link href="http://ryalnd.github.com/blog/2011/02/10/math-in-the-cold/"/>
    <updated>2011-02-10T18:07:51-06:00</updated>
    <id>http://ryalnd.github.com/blog/2011/02/10/math-in-the-cold</id>
    <content type="html"><![CDATA[<p>I wasn't feeling very well today, and it was super cold out, so I decided to be as productive as I possibly could at home.  This involved:</p>

<ul>
<li>Updating profiles/resumes on various job sites</li>
<li>Searching and applying for jobs on same</li>
<li>Doing some stalking of Milwaukee-area businesses</li>
<li>Finally setting up, lurking IRC</li>
<li>Several PE problems as a reward</li>
</ul>


<p>Most of those are self-explanatory.  I finally updated the pdf version of my resume to reflect the changes made to my html version, and then updated any references to the old one.  I can't believe that Monster only accepts resumes in .rtf, .doc, and .txt.  I've mostly ignored Monster for the simple fact that I have a horribly-formatted .rtf on there and refuse to change it out of principle.  If an employer isn't going to hire me because I only provide html and pdf versions of my resume, so be it.</p>

<p>I'm starting to compile a list of possible Milwaukee-area businesses I would like to work for, so that I can start spamming them my resume :).  I finally got irssi set up on this box, as I haven't been on IRC in a looooong while.  I've been lurking #python while doing Project Euler, and actually gave my first piece of help to someone on the channel as well.  It had almost nothing to do with python, as it was a pretty basic regex question about character classes, but I helped nonetheless.</p>

<p>Did problems <a href="http://projecteuler.net/index.php?section=problems&amp;id=26">26</a>, <a href="http://projecteuler.net/index.php?section=problems&amp;id=40">40</a>, <a href="http://projecteuler.net/index.php?section=problems&amp;id=42">42</a>, <a href="http://projecteuler.net/index.php?section=problems&amp;id=45">45</a>, and <a href="http://projecteuler.net/index.php?section=problems&amp;id=52">52</a> tonight. Not bad progress for a few hours.  I also wrote a solution to problem <a href="http://projecteuler.net/index.php?section=problems&amp;id=27">27</a>, but it's still running as I write this.  I think I'm going to let it run overnight and see if it actually finishes (totally against the rules, I know).  It deals with quadratics though and I couldn't immediately see any way to narrow down the list of possible coefficients, so I just tried brute-force.  I'll let it stew in my head for a while and see if I come up with anything.</p>

<p>Not much of note for these, they were pretty straightforward.  I did write a function that performed long-division for problem 26, which I thought was pretty hilarious.  It was the easiest way to determine whether the decimal had a repeating sequence, the length of said sequence.  I got the idea from <a href="http://en.wikipedia.org/wiki/Repeating_decimal#Decimal_expansion_and_recurrence_sequence">Wikipedia</a>, if you care to see.  There was some more I/O, which was nice to have as practice, and I'm using dicts and sets, maps and lambdas all over the place now.  Slow and steady, right?</p>

<p>I know I keep promising to post my code, and as I've been saving it the only real thing keeping me from doing so is my shyness at others seeing that code.  I might select the simplest, most elegant examples, but if you'd like to see how I came to a particular solution I'd be more than willing to share.  I'm going to try to use IRC for help with refactoring some code.  My biggest concern is that I'm not doing everything in true 'pythonic' manner, so I think getting help there will reduce the shyness.</p>

<p>On the income front, I have two potential web-design contracts coming in, from friends of friends.  It'll be good practice and that's really what I need right now, more than income (although more of that would be nice, too).  All temp/contract web/IT work I've tried to attain has fallen through the cracks.  It's frustrating but what can you do.  I'm trying to stay positive and not starve to death.  So far so good.</p>

<p>It's still real cold here (0°), but it's looking to get in the 40s by Sunday, which is awesome.  I think we're going to try and go sledding tomorrow!  Fun and exercise; I could use both.</p>

<p>I also wanted to mention that I hilariously added a 'Like' button to each post on the blog.  I don't think anyone is even reading these, let alone considering 'liking' them, but I figure if and when they do that'll definitely help to get some traffic.  At this point the only traffic I could really hope for are those doing Project Euler, which is minimal at best, but we'll see.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No Job, More Euler]]></title>
    <link href="http://ryalnd.github.com/blog/2011/02/05/no-job-more-euler/"/>
    <updated>2011-02-05T17:57:27-06:00</updated>
    <id>http://ryalnd.github.com/blog/2011/02/05/no-job-more-euler</id>
    <content type="html"><![CDATA[<p>Worked on problems <a href="http://projecteuler.net/index.php?section=problems&amp;id=23">23</a> and <a href="http://projecteuler.net/index.php?section=problems&amp;id=35">35</a> tonight.  Problem 23 was pretty straightforward, especially in Python:</p>

<ol>
<li><p>Define a function that finds the sum of a number's proper divisors</p></li>
<li><p>Create a list of all abundant numbers less than 28123</p></li>
<li><p>Create a <strong>set</strong> of sums resulting from the addition of each pair in the list described in 2.</p></li>
<li><p>Create a final set of numbers &lt; 28123 that are not in the set described in 3.</p></li>
</ol>


<p>The answer is the sum of that last set. Easy enough, right?  I've been using the built-in <code>set</code> structure from Python where it makes sense (where I don't want duplicates), although I've been doing so under the assumption that their duplicate handling is better-implemented than anything I would write after-the-fact.  I imagine they're just doing some checks before actually appending, but I'm curious to learn exactly how they're doing it, and if in fact I'm using set correctly in these instances.  Remind me to look that up later.</p>

<p>Figured I'd have 35 finished by the time I finished writing this, but my algorithm is apparently too naive, and requires something more than iterating through all primes under one million to find which are circular. Dang.  I'll keep working on it after this, and post about it when I'm done.</p>

<p>Did a bit of work on the main site, mostly behind the scenes.  I actually designed a few logos today, as I plan on putting a banner/header at the top in place of my little 'random statement' javascript thingy.  I'm moving toward making the front page more like the border-rounded, background-gradiented, 'look at me I'm a 2.0 designer' designs you see everywhere these days.  Not because I agree with the aesthetic, but because I want to show that I can do that, too.</p>

<p>Super Bowl tomorrow.  I honestly haven't payed very much attention this season, but having the Packers in the running always reminds me of the great Holmgren era, and thus of my childhood.  It's always fun to watch a football game with friends, especially when I'm actually invested in a team, so tomorrow should be a lot of fun.</p>

<p>Still no job, but I'm pretty much constantly in talks with recruiters.  The fact that in the past several months they've not managed to find me a job indicates that maybe they're not the best way to go, but I remain confident in my competence and have no doubt that eventually someone else will recognize it as well.</p>

<p>In the meantime I'll be calculating circular primes and learning from my mistakes.</p>

<p>Edit (12:16am):
Finished problem 35.  Pretty embarrassed about that one.  I was trying to speed up the algorithm by reducing the list of primes over which it was iterating, but wasn't having much luck, until the daily facepalm:</p>

<blockquote><p><strong>Besides 2 and 5, circular primes' digits can only be 1,3,7, or 9.</strong></p></blockquote>

<p>The number of primes under one million? About 78k.  Those that also satisfy the above condition? 2500.</p>

<p>Problem 35 down.  33 problems done, 289 to go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lots of Snow]]></title>
    <link href="http://ryalnd.github.com/blog/2011/01/31/lots-of-snow/"/>
    <updated>2011-01-31T19:11:48-06:00</updated>
    <id>http://ryalnd.github.com/blog/2011/01/31/lots-of-snow</id>
    <content type="html"><![CDATA[<p>Woke up to the promise of a blizzard.</p>

<p>I was supposed to head down to Kenosha for a dentist's appointment this morning, but that was canceled due to weather; it wasn't a crucial appointment, and I really didn't want to be stuck there until Wednesday/Thursday.</p>

<p>Today also marked the first Mad Railers meeting I was (supposed to be) attending, but weather and lack of suitable transportation left me home coding instead.  I tried to make myself feel better with some Ruby/Rails research/education and rationalizing that my lack of knowledge in that framework would prevent me from learning/contributing much at such a meeting, but I'm still bummed that I missed it and have yet to attend.  Next month's meeting is marked in red on the calendar.</p>

<p>PE update:  Did problems <a href="http://projecteuler.net/index.php?section=problems&amp;id=24">24</a>, <a href="http://projecteuler.net/index.php?section=problems&amp;id=36">36</a>, and <a href="http://projecteuler.net/index.php?section=problems&amp;id=34">34</a> today, in that order.  24 was the most interesting; I had started on a solution to it a few days ago.  I knew from my Combinatorics class how to represent permutations as a list of inversions:</p>

<blockquote><p>Given a set of n digits, each permutation of that set can be written as a list of n-1 numbers, say i(0)-i(n-1), where i(n) represents the number of inversions with respect to n. You only need n-1 numbers in the list/vector, as the last is implied(same idea as degrees of freedom in stats).</p></blockquote>

<p>If the original set is in lexicographic order, i.e. 12345, the easiest way to explain, say,  i(3) is as the count of numbers out of order with respect to 3.  If the permutation is 23145, the inversion vector(list) would be [1100].</p>

<p>This means that 2 has one number out of order (1), as does 3 (also 1).  Remember though, that inversions in general are just a pair(x,y), and a permutation can be defined as the list of pairwise-flips (inversions) it takes to get from the original number/set/whatever.</p>

<p>So, knowing that, I basically jumped into writing a solution as follows:</p>

<ul>
<li>The starting, 0th permutation is 0123456789</li>
<li>I would manually write out the next x permutations, in lexicographic order, along with the corresponding inversion vectors, in the hopes of seeing a pattern regarding the list of inversion vectors.

<ul>
<li>I did this under the idea that calculating 1,000,000 10-digit numbers in a certain way would be much faster than actually doing the permuting manually, one million times.</li>
</ul>
</li>
</ul>


<p>I did this for what ended up being the first 24 permutations, which corresponded to permutations of only the last 4 digits, and ended up with something like the table on the far left:</p>

<table class='small left'>
<tr><th> number </th><th> permutation </th></tr>
<tr><td> 6987 </td><td> 012 </td></tr>
<tr><td> 7689 </td><td> 100 </td></tr>
<tr><td> 7698 </td><td> 101 </td></tr>
<tr><td> 7869 </td><td> 110 </td></tr>
<tr><td> 7896 </td><td> 111 </td></tr>
<tr><td> 7968 </td><td> 102 </td></tr>
<tr><td> 7986 </td><td> 112 </td></tr>
<tr><td> 8679 </td><td> 020 </td></tr>
<tr><td> 8697 </td><td> 021 </td></tr>
<tr><td> 8769 </td><td> 120 </td></tr>
<tr><td> 8796 </td><td> 121 </td></tr>
<tr><td> 8967 </td><td> 022 </td></tr>
<tr><td> 8976 </td><td> 122 </td></tr>
<tr><td> 9678 </td><td> 003 </td></tr>
<tr><td> 9687 </td><td> 013 </td></tr>
<tr><td> 9768 </td><td> 103 </td></tr>
<tr><td> 9786 </td><td> 113 </td></tr>
<tr><td> 9867 </td><td> 023 </td></tr>
<tr><td> 9876 </td><td> 123 </td></tr>
</table>




<table class='small left'>
<tr><th> decimal   </th><th> factorial   </th></tr>
<tr><td> 0         </td><td> 0!          </td></tr>
<tr><td> 1         </td><td> 10!         </td></tr>
<tr><td> 2         </td><td> 100!        </td></tr>
<tr><td> 3         </td><td> 110!        </td></tr>
<tr><td> 4         </td><td> 200!        </td></tr>
<tr><td> 5         </td><td> 210!        </td></tr>
<tr><td> 6         </td><td> 1000!       </td></tr>
<tr><td> 7         </td><td> 1010!       </td></tr>
<tr><td> 8         </td><td> 1100!       </td></tr>
<tr><td> 9         </td><td> 1110!       </td></tr>
<tr><td> 10        </td><td> 1200!       </td></tr>
<tr><td> 11        </td><td> 1210!       </td></tr>
<tr><td> 12        </td><td> 2000!       </td></tr>
<tr><td> 13        </td><td> 2010!       </td></tr>
<tr><td> 14        </td><td> 2100!       </td></tr>
<tr><td> 15        </td><td> 2110!       </td></tr>
<tr><td> 16        </td><td> 2200!       </td></tr>
<tr><td> 17        </td><td> 2210!       </td></tr>
<tr><td> 18        </td><td> 3000!       </td></tr>
<tr><td> 19        </td><td> 3010!       </td></tr>
<tr><td> 20        </td><td> 3100!       </td></tr>
<tr><td> 21        </td><td> 3110!       </td></tr>
<tr><td> 22        </td><td> 3200!       </td></tr>
<tr><td> 23        </td><td> 3210!       </td></tr>
</table>


<p>Not seeing a pattern?  Neither did I.  It starts out looking like it's just counting up in binary, but then a 2 pops up, and there aren't any nice rules like, say, 'they increase in value from L to R' because of cases like 8679.</p>

<p>I tried in vain to see/reverse-engineer a pattern from this list of vectors, and eventually gave up for the night.   I knew that I was on the right track, that somehow the order in which these items were inverted to preserve lexicographic order wasn't just random.  As with some of my past PE solutions, the key came from a little bit of research: I was browsing Wikipedia's entry on permutations, when I came to <a href="http://en.wikipedia.org/wiki/Permutation#Numbering_permutations">this</a>.</p>

<p>Well, that definitely looked promising.  After a bit more reading and clicking links, I came upon the table you see on the immediate left(found <a href="http://en.wikipedia.org/wiki/Factorial_number_system#Examples">here</a>):</p>

<p>Ok, so they're not exactly the same.  I think the irregularities come from my non-standard, on-the-fly way of representing permutations, but you can imagine my excitement when I found that table.  It meant my hunch was right, and the main point was this:  <strong>Listing permutations in lexicographic order yields a pattern of inversion vectors, and this pattern corresponds directly to the factoradic representation of that permutation's order in that list.  </strong>Or, to quote Wikipedia a few lines down:</p>

<p><em>There is a natural mapping between the integers 0, ..., n! − 1 (or equivalently the numbers with n digits in factorial representation) and permutations of n elements in lexicographical order, when the integers are expressed in factoradic form. This mapping has been termed the Lehmer code (or inversion table).</em></p>

<p>Well, there you have it.  The trick comes from writing a decimal in factoradic form, i.e.</p>

<pre><code>15 = 2110! = 2*3! + 1*2! + 1*1! + 0*0!
</code></pre>

<p>and 2110 as an inversion vector corresponds to the permutation 2130, which is:</p>

<blockquote><p>The 15th permutation of 0123. Yay!</p></blockquote>

<p>So I had my answer.  To find the millionth lexicographic permutation of 0123456789, all I had to do was find the factoradic representation of 999999 (off by one), which would map to an inversion vector, from which I could find the permutation.  And find it I did.</p>

<p>After that, 36 and 34 were easy.  For 36 I just wrote a function <code>is_pal()</code> that takes a string and returns whether or not it's palindromic (and now I know how to get the binary representation of an int!).  34 was even easier: I reused the factorial function I had just written for 24 (I know there are built-in ones now; I wanted to write my own).</p>

<p>Hopefully tomorrow won't get snowed out.</p>
]]></content>
  </entry>
  
</feed>
